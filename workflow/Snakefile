from os.path import join
from telnetlib import theNULL
import pandas as pd
import itertools

# rule workflow order
include: join("rules","init.smk")
include: join("rules","generate_bed.smk")
include: join("rules","pre_process.smk")
include: join("rules","subsample.smk")
include: join("rules","fragment_counting.smk")
include: join("rules","post_process.smk")

# other rules
include: join("rules","build_index.smk")

# set species
species=config["species"]

# set reference source
reference_source=config["reference_source"]

# create sample list
SAMPLE_LIST='_and_'.join(SAMPLES)

# set pipeline phase
pipeline_phase=config["pipeline_phase"]

# create lists for fragment counting
min_frag=list(range(120,180,10))
max_frag=list(range(130,190,10))
min_max_list=[]
for min_f, max_f in zip(min_frag, max_frag):
   min_max_list.append(str(min_f)+"_"+str(max_f))

# set location for output_contrast
output_contrast_location=config["output_contrast_location"]

# set output for file contrast
contrast_shorthand=config["contrast_shorthand"]

localrules: all

if (pipeline_phase == "first_pass"):
    output_files=[
        # index file
        GENOME_INDEX_FILE,
        
        # # trimming
        # expand(join(RESULTSDIR,'01_trim','{sample_id}.R1.trimmed.fastq.gz'),sample_id=SAMPLES),
        # expand(join(RESULTSDIR,'01_trim','{sample_id}.R2.trimmed.fastq.gz'),sample_id=SAMPLES),

        # # assembly
        # expand(join(RESULTSDIR,'02_assembled','{sample_id}.{sp}.assembled.fastq.gz'),sample_id=SAMPLES, sp=species),

        # alignment
        expand(join(RESULTSDIR,'03_aligned','01_bam','{sample_id}.{sp}.mapped.bam'),sample_id=SAMPLES, sp=species),
        expand(join(RESULTSDIR,'03_aligned','02_bed','{sample_id}.{sp}.mapped.bed'),sample_id=SAMPLES, sp=species),

        # all histogram
        expand(join(RESULTSDIR,'03_aligned','03_histograms','{sample_id}.{sp}.length_hist.all.png'),sample_id=SAMPLES, sp=species),

        # all fragment counts
        expand(join(RESULTSDIR,'03_aligned','04_counts','{sample_id}.{sp}.{min_max_list}.InGenes.counts.csv'),sample_id=SAMPLES, sp=species,min_max_list=min_max_list),
    ]
elif (pipeline_phase=="second_pass"):
    output_files=[
        # shorthand bed file 
        expand(join(RESULTSDIR,'00_selected_bed','{selected_shorthand}.bed'),selected_shorthand=selected_shorthand),
        
        # subselect bed file
        expand(join(RESULTSDIR,'03_aligned','02_bed','{sample_id}.{sp}.{min_length}-{max_length}.{selected_shorthand}.bed'), sample_id=SAMPLES, sp=species, min_length=min_length, max_length=max_length, selected_shorthand=selected_shorthand),
        expand(join(RESULTSDIR,'03_aligned','03_histograms','{sample_id}.{sp}.length_hist.{min_length}-{max_length}.{selected_shorthand}.png'), sample_id=SAMPLES, sp=species, min_length=min_length, max_length=max_length, selected_shorthand=selected_shorthand),

        # DYAD analysis
        expand(join(RESULTSDIR,'04_dyads','01_DYADs','{sample_id}.{sp}.{min_length}-{max_length}.{selected_shorthand}.DYADs'),sample_id=SAMPLES, sp=species,min_length=min_length, max_length=max_length, selected_shorthand=selected_shorthand),
        expand(join(RESULTSDIR,'04_dyads','03_CSV','{sample_id}.{sp}.{min_length}-{max_length}.{selected_shorthand}.DAC.corrected.csv'),sample_id=SAMPLES, sp=species,min_length=min_length, max_length=max_length, selected_shorthand=selected_shorthand),
    ]
elif (pipeline_phase=="third_pass"):
# merge contrasts
    output_files=[
        expand(join(output_contrast_location,'final_{ccl}.{min_length}-{max_length}.{contrast_shorthand}.DAC.csv'),ccl=CONTRASTS_CLEAN_LIST, sp=species, min_length=min_length, max_length=max_length, contrast_shorthand=contrast_shorthand)
    ]

rule all:
    input:
        output_files